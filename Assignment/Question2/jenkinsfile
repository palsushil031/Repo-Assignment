//...(a)-CI_Pipeline...(b)-CD_Pipeline

pipeline {
    agent any
     tools {
        jdk 'jdk17'
    }

environment {
    SCANNER_HOME = tool 'sonar-scanner'
}

    stages {
        stage('Git CheckOut') {
            steps {
                checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/palsushil031/AwsCICD-py.git']])
            }
        }

        stage('Test') {
            steps {
                sh 'python3 -m pytest'
            }
        }

        stage('SonarQube Analysis') {
            steps {
            sh ''' $SCANNER_HOME/bin/sonars-canner -Dsonar.url=http://http://54.91.53.63:9000/ 
            -Dsonar.login=squ_3f6672e5558242cfc4048cc2fd7f1863e2fe1c06 -Dsonar.ProjectName=app.py\ 
            -Dsonar.java.binarie=. \  
            -Dsonar.ProjectKey=app.py '''
            }
        }

        stage('Build & Push Docker image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: '406c6465-dc6f-41ba-94af-d6b0016d3fa2') {
                    sh "docker build -t app:latest ."
                    sh "docker tag app:latest palsushil/app:latest"
                    sh "docker push palsushil/app:latest"
                }
            }
        }
    }

    stage('Trigger CD Pipeline') {
            steps {
                build job: "CD_Pipeline", wait: true
            }
        }
}



// (b) - CD_Pipeline

pipeline {
    agent any

    stages {
        stage('Docker Deploy To Container') {
            steps {
                script{
                    withDockerRegistry(credentialsId: '406c6465-dc6f-41ba-94af-d6b0016d3fa2', toolName: 'docker') {
                        sh "docker run -d --name app:latest -p 8070:8070 palsushil/app:latest"
                    }
                }
            }
        }